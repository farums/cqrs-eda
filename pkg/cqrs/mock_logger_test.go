// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package cqrs_test

import (
	"sync"
	"github.com/theskyinflames/cqrs-eda/pkg/cqrs"
)

// Ensure, that LoggerMock does implement cqrs.Logger.
// If this is not the case, regenerate this file with moq.
var _ cqrs.Logger = &LoggerMock{}

// LoggerMock is a mock implementation of cqrs.Logger.
//
//	func TestSomethingThatUsesLogger(t *testing.T) {
//
//		// make and configure a mocked cqrs.Logger
//		mockedLogger := &LoggerMock{
//			PrintfFunc: func(format string, v ...interface{})  {
//				panic("mock out the Printf method")
//			},
//		}
//
//		// use mockedLogger in code that requires cqrs.Logger
//		// and then make assertions.
//
//	}
type LoggerMock struct {
	// PrintfFunc mocks the Printf method.
	PrintfFunc func(format string, v ...interface{})

	// calls tracks calls to the methods.
	calls struct {
		// Printf holds details about calls to the Printf method.
		Printf []struct {
			// Format is the format argument value.
			Format string
			// V is the v argument value.
			V []interface{}
		}
	}
	lockPrintf sync.RWMutex
}

// Printf calls PrintfFunc.
func (mock *LoggerMock) Printf(format string, v ...interface{}) {
	callInfo := struct {
		Format string
		V      []interface{}
	}{
		Format: format,
		V:      v,
	}
	mock.lockPrintf.Lock()
	mock.calls.Printf = append(mock.calls.Printf, callInfo)
	mock.lockPrintf.Unlock()
	if mock.PrintfFunc == nil {
		return
	}
	mock.PrintfFunc(format, v...)
}

// PrintfCalls gets all the calls that were made to Printf.
// Check the length with:
//
//	len(mockedLogger.PrintfCalls())
func (mock *LoggerMock) PrintfCalls() []struct {
	Format string
	V      []interface{}
} {
	var calls []struct {
		Format string
		V      []interface{}
	}
	mock.lockPrintf.RLock()
	calls = mock.calls.Printf
	mock.lockPrintf.RUnlock()
	return calls
}
